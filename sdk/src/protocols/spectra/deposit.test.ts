import { eth } from "."
import { wallets } from "../../../test/wallets"
import { applyPermissions, stealErc20 } from "../../../test/helpers"
import { eth as kit } from "../../../test/kit"
import { ethers, isAddress, parseEther, toBeHex } from "ethers"
import { Chain, contracts } from "../../../src"
import { getProvider } from "../../../test/provider"

const WSTETH = contracts.mainnet.lido.wstEth as `0x${string}`
const STEAL_ADDRESS = "0x0B925eD163218f6662a35e0f0371Ac234f9E9371"

describe("spectra", () => {
  describe("deposit action", () => {
    beforeAll(async () => {
      await applyPermissions(Chain.eth, await eth.deposit())
    })

    it("deposit", async () => {
      const amount = BigInt(toBeHex(parseEther("1")))

      await stealErc20(Chain.eth, WSTETH, amount * 2n, STEAL_ADDRESS)
      
      // Check balance
      const balance = await kit.asMember.wsteth.balanceOf(STEAL_ADDRESS)
      console.log("Balance: ", balance.toString())
      console.log("Blance = ", balance, "\namount = ", amount)
      // expect(balance.toString()).toEqual(amount.toString())

      // Approve tokens first (required for most operations)
      await kit.asMember.wsteth.approve(contracts.mainnet.spectra.router, amount)
      //0x0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0

      //all the address es:
      const token = "0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0" //wsteth underlying_token
      const ibt = "0xd89fc47aacbb31e2bf23ec599f593a4876d8c18c" // interest bearing token : Proxy for SpectraWrappedILRT -> [spectra Wrapped ILRT]
      const recipient = "0x8e53d04644e9ab0412a8c6bd228c84da7664cfe3" //GnosisSafeProxy = ytRecipient
      const pt = "0x4ae0154f83427a5864e5de6513a47dac9e5d5a69" //principal token
      const ptRecipient = "0x0000000000000000000000000000000000000000e0" // ??
      const ytRecipient = "0x8e53d04644e9ab0412a8c6bd228c84da7664cfe3" // GnosisSafeProxy = recipient (Yield Token (YT))
      const pool = "0xe119bad8a35b999f65b1e5fd48c626c327daa16b" // Vyper_contract => proxy (just a normal pool name ???)


      const commands = "0x0004060c"
      const inputs = [
        // //TRANSFER_FROM = "00" // (address token, uint256 value)
        // "0x0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca000000000000000000000000000000000000000000000000145531d012bcdf8c5",
        // //DEPOSIT_ASSET_IN_IBT = "04" //(address ibt, uint256 assets, address recipient)
        // "0x000000000000000000000000d89fc47aacbb31e2bf23ec599f593a4876d8c18c800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0",
        // // DEPOSIT_IBT_IN_PT = "06" //(address pt, uint256 ibts, address ptRecipient, address ytRecipient, uint256 minShares)
        // "0x0000000000000000000000004ae0154f83427a5864e5de6513a47dac9e5d5a69000000000000000000000000000000000000000000000000a5a582b6bd4c551f00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000efccbb9e2c09ea29551879bd9da32362b32fc89000000000000000000000000000000000000000000000000a3fe84008028a22c",
        // // CURVE_ADD_LIQUIDITY = "0c" //(address pool, uint256[] amounts, uint256 min_mint_amount, address recipient)
        // "0x000000000000000000000000e119bad8a35b999f65b1e5fd48c626c327daa16b80000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a1694b4ab42963d60000000000000000000000000efccbb9e2c09ea29551879bd9da32362b32fc89",
        
        //00// "0x0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0 // 0000000000000000000000000000000000000000000000000de0b6b3a7640000",
        //04// "0x000000000000000000000000d89fc47aacbb31e2bf23ec599f593a4876d8c18c // 8000000000000000000000000000000000000000000000000000000000000000 // 00000000000000000000000000000000000000000000000000000000000000e0",
        //06// "0x0000000000000000000000004ae0154f83427a5864e5de6513a47dac9e5d5a69 // 0000000000000000000000000000000000000000000000000710f21f993ae433 // 00000000000000000000000000000000000000000000000000000000000000e0 // 0000000000000000000000008e53d04644e9ab0412a8c6bd228c84da7664cfe3 // 00000000000000000000000000000000000000000000000006fee6cca8cbc501",
        //0c// "0x000000000000000000000000e119bad8a35b999f65b1e5fd48c626c327daa16b // 8000000000000000000000000000000000000000000000000000000000000000 +  8000000000000000000000000000000000000000000000000000000000000000 // 00000000000000000000000000000000000000000000000006e2b1ca24a75b31 // 0000000000000000000000008e53d04644e9ab0412a8c6bd228c84da7664cfe3",
        //00// "0x000000000000000000000000
        //00// "0xe119bad8a35b999f65b1e5fd48c626c327daa16b // -> address pool = Vyper_contract => proxy for 
        //00// "00000000000000000000000000000000000000000000000006e2b1ca24a75b310000000000000000000000008e53d04644e9ab0412a8c6bd228c84da7664cfe3
        //0x8e53d04644e9ab0412a8c6bd228c84da7664cfe3 GnosisSafeProxy

        "0x0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "0x000000000000000000000000d89fc47aacbb31e2bf23ec599f593a4876d8c18c800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0",
        "0x0000000000000000000000004ae0154f83427a5864e5de6513a47dac9e5d5a690000000000000000000000000000000000000000000000000710f21f993ae43300000000000000000000000000000000000000000000000000000000000000e00000000000000000000000008e53d04644e9ab0412a8c6bd228c84da7664cfe300000000000000000000000000000000000000000000000006fee6cca8cbc501",
        "0x000000000000000000000000e119bad8a35b999f65b1e5fd48c626c327daa16b8000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e2b1ca24a75b310000000000000000000000008e53d04644e9ab0412a8c6bd228c84da7664cfe3",
      ]
      
    //  Execute the deposit command with proper encoded parameters
      await expect(
        kit.asMember.spectra.router["execute(bytes,bytes[])"](commands, inputs)
      ).not.toRevert()
    })
  })
})
