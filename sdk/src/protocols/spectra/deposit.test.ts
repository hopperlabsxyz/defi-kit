import { eth } from "."
import { wallets } from "../../../test/wallets"
import { applyPermissions, stealErc20 } from "../../../test/helpers"
import { eth as kit } from "../../../test/kit"
import { AbiCoder, ethers, parseEther, toBeHex } from "ethers"
import { Chain, contracts } from "../../../src"
import { getProvider } from "../../../test/provider"
import { c } from "zodiac-roles-sdk/."

const weth = "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
const input1 =
  "0x000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000001ba55f6289df860000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0"
// const inpu4 = ""
describe("spectra", () => {
  describe("deposit action", () => {
    beforeAll(async () => {
      await applyPermissions(Chain.eth, await eth.deposit())
    })

    it("deposit", async () => {
      const provider = getProvider(Chain.eth)
      const amount = BigInt(toBeHex(parseEther("10")))
      const tokenAddress = weth

      const command1 = "0x00" // TRANSFER_FROM
      const command2 = "0x02" // TRANSFER (this might represent another command)
      const command4 = "0x04" // DEPOSIT_ASSET_IN_IBT (address ibt, uint256 assets, address recipient)

      const input =
        "0x000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000001ba55f6289df860000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000000000000000000000000000015613d59ea54ac00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000844e21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000005c00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000d733e545c65d539f588d7c3793147b497403f0d20000000000000000000000000000000000000000000000000000000067b3512400000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040593611990000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000003f3ee751ab00246cb0beec2e904ef51e18ac4d77000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca300000000000000000000000000000000ffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000002000000000000000000000000166b1b95000000000000000000015613d59ea54ac000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000d733e545c65d539f588d7c3793147b497403f0d2000000000000000000000000000000000000000000000000001ba55f6289df8600000000000000000000000000000000000000000000000000133dea6a861901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022c7b22536f75726365223a2273706563747261222c22416d6f756e74496e555344223a2232312e3835363735373838383235373138222c22416d6f756e744f7574555344223a2232302e3138343534373434373735393632222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2236303137383930363430333532343238222c2254696d657374616d70223a313733393830333736342c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22636665537666674e6f43446e4e582f49556d366f716375343473477146415435415a336f78552f5467677559692f394b5677724f544378427850644f62656d5759426572416b57474b2b415635434b574e387a7a6f376143517563463054534e4b73443633324b4c496b576d5334494a49715a5359633238366679594a49694f6853634f424d446e626245637a7132384f48517647574678674c625a5472544c5865523652486c7946574e4a614134365034714b6b33324d51514567465655366c6975454b6b4c6851414556337537787a3063716e6753414a6537354b34435a7473537a71416e62452f362b766c504f4c62466d4a454435386a4c363643314f34342b5a54734d304172324e6d7931313863594c43414c754a4a61506865577a596b2b4f66374b7541463744526d50665432797571784365534f6b78744572636550446852346e364d5a514149363976622f476668413d3d227d7d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

      const input2 =
        "0x000000000000000000000000d89fc47aacbb31e2bf23ec599f593a4876d8c18c800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0"
      /**
       * Deposits an ERC20 underlying into an ERC4626 IBT
       * ibt represents the target IBT and assets represents the amount of underlying to deposit
       * (address ibt, uint256 assets, address recipient)
       */
      // uint256 constant DEPOSIT_ASSET_IN_IBT = 0x04;
      const assets = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000")

      const decoded = ethers.AbiCoder.defaultAbiCoder().encode(
        //for command 0x04
        ["address", "uint256", "address"],
        [
          "0xd89fc47aacbb31e2bf23ec599f593a4876d8c18c",
          assets,
          wallets.avatar,//0xe0
        ]
      )

      console.log(decoded)
      // const input1 = ethers.AbiCoder.defaultAbiCoder().encode(
      //   ["address", "uint256", "address", "uint256", "bytes"],
      //   [tokenAddress, amount.toString()]
      // )
      // const input2 = ethers.utils.defaultAbiCoder.encode(
      //   ["address", "address", "uint256"],
      //   [recipientAddress, tokenAddress, value]
      // )

      const commands = [command1, command2]
      const inputs = [input1, input1]

      // Combine commands into a single execute call
      // await router.execute(commands, inputs)

      const router = contracts.mainnet.spectra.router
      await provider.send("anvil_setBalance", [
        wallets.avatar,
        toBeHex(parseEther("10")),
      ])
      //trying the command 0x00 = uint256 constant TRANSFER_FROM = 0x00;
      // /**
      //  * Transfers tokens from msg.sender to the Router.
      //   * (address token, uint256 value)
      //   */
      // Try using a different command format - either the function selector or properly encoded
      const SPECTRA_CMD = "0xe21fd0e9" // This is the function selector found in your input data
      console.log("Command being passed:", "0x04")
      console.log("Arguments being passed:", [weth, amount])

      await kit.asMember.weth.approve(router, amount)
      await expect(
        kit.asMember.spectra.router["execute(bytes,bytes[])"]("0x04", [
          weth,
          amount.toString(),
        ])
      ).not.toRevert()
    })
  })
})
